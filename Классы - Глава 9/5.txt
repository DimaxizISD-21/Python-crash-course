#Наследование
#Метод __init__() класса-потомка

# class Car:
# 	def __init__(self, make, model, year):
# 		self.make = make
# 		self.model = model
# 		self.year = year
# 		self.odometer_reading = 0

# 	def get_descriptive_name(self):
# 		full_name = str(self.year) + ' ' + self.make + ' ' + self.model
# 		return full_name.title()

# 	def read_odometer(self):
# 		print('This car has ' + str(self.odometer_reading) + ' miles on it.')

# 	def update_odometer(self, mileage):
# 		if mileage >= self.odometer_reading:
# 			self.odometer_reading = mileage
# 		else:
# 			print('You can`t roll back an odometer!')

# 	def increment_odometer(self, miles):
# 		self.odometer_reading += miles

# class ElectricCar(Car):
# 	#Представляет аспекты машины, специфические для электромобилей.
# 	def __init__(self, make, model, year):
# 		#Инициализирует атрибуты класса-родителя.
# 		super().__init__(make, model, year)

# my_tesla = ElectricCar('tesla', 'model s', 2016)
# print(my_tesla.get_descriptive_name())

################################################################

#Определение атрибутов и методов класса-потомка

# class Car:
# 	def __init__(self, make, model, year):
# 		self.make = make
# 		self.model = model
# 		self.year = year
# 		self.odometer_reading = 0

# 	def get_descriptive_name(self):
# 		full_name = str(self.year) + ' ' + self.make + ' ' + self.model
# 		return full_name.title()

# 	def read_odometer(self):
# 		print('This car has ' + str(self.odometer_reading) + ' miles on it.')

# 	def update_odometer(self, mileage):
# 		if mileage >= self.odometer_reading:
# 			self.odometer_reading = mileage
# 		else:
# 			print('You can`t roll back an odometer!')

# 	def increment_odometer(self, miles):
# 		self.odometer_reading += miles

# class ElectricCar(Car):
# 	#Представляет аспекты машины, специфические для электромобилей.
# 	def __init__(self, make, model, year):
# 		#Инициализирует атрибуты класса-родителя.
# 		#Затем инициализирует атрибуты, специфические для электромобиля.
# 		super().__init__(make, model, year)
# 		self.battery_size = 70

# 	def describe_battery(self):
# 		print('This car has ' + str(self.battery_size) + ' -kwh battery.')

# my_tesla = ElectricCar('tesla', 'model s', 2016)
# print(my_tesla.get_descriptive_name())
# my_tesla.describe_battery()

################################################################

#Переопределение методов класса-родителя

# class ElectricCar(Car):
# 	#Представляет аспекты машины, специфические для электромобилей.
# 	def __init__(self, make, model, year):
# 		#Инициализирует атрибуты класса-родителя.
# 		#Затем инициализирует атрибуты, специфические для электромобиля.
# 		super().__init__(make, model, year)
# 		self.battery_size = 70

# 	def describe_battery(self):
# 		print('This car has ' + str(self.battery_size) + ' -kwh battery.')

# 	def fill_get_tank(self):
# 		#У электромобилей нет бензобака.
# 		print('This car doesn`t need a gas tank!')

# my_tesla = ElectricCar('tesla', 'model s', 2016)
# print(my_tesla.get_descriptive_name())
# my_tesla.describe_battery()
# my_tesla.fill_get_tank()

################################################################

#Экземпляры как атрибуты

# class Car:
# 	def __init__(self, make, model, year):
# 		self.make = make
# 		self.model = model
# 		self.year = year
# 		self.odometer_reading = 0

# 	def get_descriptive_name(self):
# 		full_name = str(self.year) + ' ' + self.make + ' ' + self.model
# 		return full_name.title()

# 	def read_odometer(self):
# 		print('This car has ' + str(self.odometer_reading) + ' miles on it.')

# 	def update_odometer(self, mileage):
# 		if mileage >= self.odometer_reading:
# 			self.odometer_reading = mileage
# 		else:
# 			print('You can`t roll back an odometer!')

# 	def increment_odometer(self, miles):
# 		self.odometer_reading += miles

# class Battery:
# 	def __init__(self, battery_size = 70):
# 		#Инициализирует атрибуты аккумулятора.
# 		self.battery_size = battery_size

# 	def describe_battery(self):
# 		print('This car has ' + str(self.battery_size) + ' -kwh battery.')

# class ElectricCar(Car):
# 	#Представляет аспекты машины, специфические для электромобилей.
# 	def __init__(self, make, model, year):
# 		#Инициализирует атрибуты класса-родителя.
# 		#Затем инициализирует атрибуты, специфические для электромобиля.
# 		super().__init__(make, model, year)
# 		self.battery = Battery() #Принимает параметры класса Battery

# my_tesla = ElectricCar('tesla', 'model s', 2016)
# print(my_tesla.get_descriptive_name())

# my_tesla.battery.describe_battery() #Экземпляр класса my_tesla обращается к атрибуту(классу) Batery за методом describe_battery()

################################################################

# class Car:
# 	def __init__(self, make, model, year):
# 		self.make = make
# 		self.model = model
# 		self.year = year
# 		self.odometer_reading = 0

# 	def get_descriptive_name(self):
# 		full_name = str(self.year) + ' ' + self.make + ' ' + self.model
# 		return full_name.title()

# 	def read_odometer(self):
# 		print('This car has ' + str(self.odometer_reading) + ' miles on it.')

# 	def update_odometer(self, mileage):
# 		if mileage >= self.odometer_reading:
# 			self.odometer_reading = mileage
# 		else:
# 			print('You can`t roll back an odometer!')

# 	def increment_odometer(self, miles):
# 		self.odometer_reading += miles

# class Battery:
# 	def __init__(self, battery_size = 70):
# 		#Инициализирует атрибуты аккумулятора.
# 		self.battery_size = battery_size

# 	def describe_battery(self):
# 		print('This car has ' + str(self.battery_size) + ' -kwh battery.')

# 	#########---Добавляем метод get_range---#########
# 	def get_range(self):
# 		#Выводит приблизительный запас хода для аккумулятора.
# 		if self.battery_size == 70:
# 			range = 240
# 		elif self.battery_size == 85:
# 			range = 270

# 		messsage = 'This car can go approximately ' + str(range)
# 		messsage += ' miles on a full charge. '
# 		print(messsage)

# class ElectricCar(Car):
# 	#Представляет аспекты машины, специфические для электромобилей.
# 	def __init__(self, make, model, year):
# 		#Инициализирует атрибуты класса-родителя.
# 		#Затем инициализирует атрибуты, специфические для электромобиля.
# 		super().__init__(make, model, year)
# 		self.battery = Battery() #Принимает параметры класса Battery

# my_tesla = ElectricCar('tesla', 'model s', 2016)
# print(my_tesla.get_descriptive_name())
# my_tesla.battery.describe_battery() #Экземпляр класса my_tesla обращается к атрибуту(классу) Batery за методом describe_battery()
# my_tesla.battery.get_range() #Выводим приблизительный запас хода для аккумулятора